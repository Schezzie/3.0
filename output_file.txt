Deploy a Flask App | Render Docs
Product
Features
Autoscaling
Private Networking
Managed PostgreSQL
Managed Redis®
Persistent Disks
Infrastructure as Code
Preview Environments
Zero Downtime Deploys
Render API
Services
Static Sites
Web Services
Private Services
Background Workers
Cron Jobs
PostgreSQL
Redis®
Compare to Heroku
Runtimes
Node
Docker
Static Sites
Python
Ruby
Elixir
Go
Rust
PHP
Pricing
Blog
Docs
Careers
About
Sign In
Get Started
Documentation
Search docs
Start
Quickstarts
Free instances
Team features
Migrate from Heroku
Service types
Which to use?
Static sites
Web services
Private services
Background workers
Cron jobs
One-off jobs
Deploying
How deploys work
Build pipeline
Service previews
Deploy hooks
Troubleshooting deploys
Git commits
Deploy a commit
GitHub
GitLab
Monorepo support
Docker images
Docker on Render
Deploy from a registry
Using secrets
Runtime
Supported languages
Native runtimes
Environment variables & secrets
Default environment variables
Storage
Persistent disks
Redis
PostgreSQL Databases
Creating & connecting
Backups & recovery
Read replicas
High availability
Upgrading your version
Connection pooling
Extensions
Networking
Regions
Private network
Outbound IPs
TLS certificates
Custom domains
Overview
Cloudflare
Namecheap
Other DNS providers
Workflows
Projects
Infrastructure as code (Blueprints)
Overview
Preview environments
Blueprint specification
Monitoring
Scaling
Rollbacks
Notifications
DDoS protection
Uptime best practices
Logging
In-dashboard logs
Stream to your provider
SSH
Overview
Generate a key
Add a key
Troubleshooting SSH
Integrations
Render API
Overview
API reference
CLI
Third-party tools
Datadog
Scout APM
Stripe
QuotaGuard Static IP
Formspree
Quickstarts
Flask
Deploy a Flask App
You can deploy a
Flask
application on Render in just a few clicks.
A sample app for this quick start is deployed at
https://flask.onrender.com
. The code uses
Gunicorn
to serve your app in a production setting.
Fork
render-examples/flask-hello-world
on GitHub.
This is the content of the app we’re deploying, from
a minimal Flask application
in the official docs:
from
flask
import
Flask
app
=
Flask
(
__name__
)
@app
.
route
(
'/'
)
def
hello_world
(
)
:
return
'Hello, World!'
Create a new
Web Service
on Render, and give Render permission to access your new repo.
Use the following values during creation:
Runtime
Python
Build Command
pip install -r requirements.txt
Start Command
gunicorn app:app
That’s it! Your web service will be live on your Render URL as soon as the build finishes.
Going forward, every push to your repo will automatically build your app and deploy it in production. If the build fails, Render will automatically stop the deploy process and the existing version of your app will keep running until the next successful deploy.
See
Specifying a Python Version
if you need to customize the version of Python used for your app.
Twitter
LinkedIn
GitHub
Terms
Privacy
Security and Trust
© Render 2023